* To reduce LoC

- Unify some subroutines for capture/refile/extract/insert/find

* Other

- Get https://github.com/nobiot/org-transclusion/pull/268 into upstream and update command =org-node-insert-transclusion-as-subtree= to use it.

- Write a glossary, to clarify e.g. what is a "ref" vs "reflink"

- =org-node-seq-dispatch=: Free up keys "j", "n", "p", "c"

- A workflow to allow *untitled nodes*

  (technically not untitled; the title would be an auto-assigned number)

  Already =org-node-grep= can be considered an equivalent to =org-node-find= (except it does not create new nodes).  We "just" need an equivalent to =org-node-insert-link=.  Basically, capture, refile, and insert-link would probably all reuse a subroutine for *identifying a node by a grep result.*

- More =org-node-seq-defs= wrappers:

  - A wrapper that looks at a given "master node" that defines a seq: links in the body text become the seq.

  - A wrapper that defines a seq as simply the files in a given subdirectory.

- Count some ref variants as the same ref

  If a roam-ref exists like =//www.website.com=, allow counting a link =//www.website.com?key=val&key2=val2#hash= as a reflink to the same, unless the latter has a roam-ref of its own.

  Would prolly be a fairly expensive operation.  After building tables ref<>id and dest<>links, run thru every dest and check if an existing ref is a prefix of it, then simply nconc the value with the value for the corresponding dest.  But having to check for other dests that may also be a prefix is where it would get expensive... O(n^2) I guess.

  Hm... Sort all dests alphabetically.  All near-matches will be very close to each other, and indeed an alphabetic sort even results in a sort-by-length within each possible "group".  So just run down progressively shorter prefixes until the length goes up again, then we know we're in another group.  Rough idea, but O(n^2) looks beatable.
